# consider template helpers 'isDefined', 'isEmpty', 'isString', 'isObject', 'isArray', 'isBoolean', 'isNumber'

data:
  source: root
  tables:
    source: $.tables
    properties:
      className: ^
      tableName:
        source: ^
        transform: pascalCase
      properties:
        source: $
        properties:
          name: ^
          type: type
      relations:
        source: root.$.relations
        filters:
        - filter: [equals, $.from.table, ..^]
          properties:
            name: forwardName
            relatedClass:
              source: to.table
              transform: pascalCase
            relationType:
              source: $
              transform: forwardRelationType
            fromField: from.field
            toField: to.field
            throughClass:
              source: through.table
              transform: pascalCase
            throughFromField: through.fromField
            throughToField: through.toField
        - filter: [equals, $.to.table, ..^]
          properties:
            name: reverseName
            relatedClass:
              source: from.table
              transform: pascalCase
            relationType:
              source: $
              transform: reverseRelationType
            fromField: to.field
            toField: from.field
            throughClass:
              source: through.table
              transform: pascalCase
            throughFromField: through.toField
            throughToField: through.fromField


functions:
  forwardRelationType: >
    arg1.through && arg1.single ? 'HasOneThroughRelation'
    : arg1.through ? 'ManyToManyRelation'
    : arg1.single ? 'HasOneRelation'
    : 'HasManyRelation'
  reverseRelationType: >
    arg1.through && arg1.single ? 'HasOneThroughRelation'
    : arg1.through ? 'ManyToManyRelation'
    : 'BelongsToOneRelation'
